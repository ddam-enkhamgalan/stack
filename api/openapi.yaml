{
openapi: 3.0.0,
info: {
  title: Stack API,
  version: 1.0.0,
  description: Stack API,
  contact: {
    name: Enkh,
    email: amgaa.lcs@gmail.com
  }
},
servers: [
  {
    url: http://localhost:3000,
    description: Development server
  }
],
components: {
  securitySchemes: {
    bearerAuth: {
      type: http,
      scheme: bearer,
      bearerFormat: JWT,
      description: Enter JWT token
    }
  },
  schemas: {
    User: {
      type: object,
      required: [
        id,
        name,
        email,
        createdAt
      ],
      properties: {
        id: {
          type: integer,
          description: Unique identifier for the user,
          example: 1
        },
        name: {
          type: string,
          description: Full name of the user,
          example: John Doe
        },
        email: {
          type: string,
          format: email,
          description: Email address of the user,
          example: john@example.com
        },
        createdAt: {
          type: string,
          format: date-time,
          description: User creation timestamp,
          example: 2025-07-23T12:00:00.000Z
        },
        updatedAt: {
          type: string,
          format: date-time,
          description: User last update timestamp,
          example: 2025-07-23T12:00:00.000Z
        }
      }
    },
    CreateUserRequest: {
      type: object,
      required: [
        name,
        email,
        password
      ],
      properties: {
        name: {
          type: string,
          description: Full name of the user,
          example: John Doe,
          minLength: 1
        },
        email: {
          type: string,
          format: email,
          description: Email address of the user,
          example: john@example.com
        },
        password: {
          type: string,
          description: Password (min 8 chars, must contain uppercase, lowercase, number, special char),
          example: SecureP@ss123,
          minLength: 8
        }
      }
    },
    LoginRequest: {
      type: object,
      required: [
        email,
        password
      ],
      properties: {
        email: {
          type: string,
          format: email,
          description: Email address,
          example: john@example.com
        },
        password: {
          type: string,
          description: Password,
          example: SecureP@ss123
        }
      }
    },
    RefreshTokenRequest: {
      type: object,
      required: [
        refreshToken
      ],
      properties: {
        refreshToken: {
          type: string,
          description: JWT refresh token,
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        }
      }
    },
    AuthResponse: {
      type: object,
      properties: {
        user: {
          $ref: #/components/schemas/User
        },
        token: {
          type: string,
          description: JWT access token,
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        },
        refreshToken: {
          type: string,
          description: JWT refresh token,
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        }
      }
    },
    ApiResponse: {
      type: object,
      properties: {
        data: {
          description: The response data
        },
        message: {
          type: string,
          description: Response message,
          example: Operation successful
        },
        count: {
          type: integer,
          description: Number of items (for array responses),
          example: 10
        }
      }
    },
    ErrorResponse: {
      type: object,
      required: [
        error
      ],
      properties: {
        error: {
          type: object,
          required: [
            message,
            status
          ],
          properties: {
            message: {
              type: string,
              description: Error message,
              example: User not found
            },
            status: {
              type: integer,
              description: HTTP status code,
              example: 404
            },
            stack: {
              type: string,
              description: Error stack trace (development only)
            }
          }
        }
      }
    },
    HealthCheck: {
      type: object,
      required: [
        status,
        timestamp,
        uptime
      ],
      properties: {
        status: {
          type: string,
          enum: [
            OK,
            ERROR
          ],
          description: Health status,
          example: OK
        },
        timestamp: {
          type: string,
          format: date-time,
          description: Current timestamp,
          example: 2025-07-23T12:00:00.000Z
        },
        uptime: {
          type: number,
          description: Server uptime in seconds,
          example: 3600
        }
      }
    }
  },
  responses: {
    NotFound: {
      description: Resource not found,
      content: {
        application/json: {
          schema: {
            $ref: #/components/schemas/ErrorResponse
          }
        }
      }
    },
    BadRequest: {
      description: Bad request - Invalid input data,
      content: {
        application/json: {
          schema: {
            $ref: #/components/schemas/ErrorResponse
          }
        }
      }
    },
    TooManyRequests: {
      description: Too many requests - Rate limit exceeded,
      content: {
        application/json: {
          schema: {
            $ref: #/components/schemas/ErrorResponse
          }
        }
      }
    },
    ValidationError: {
      description: Validation error,
      content: {
        application/json: {
          schema: {
            $ref: #/components/schemas/ErrorResponse
          }
        }
      }
    },
    InternalServerError: {
      description: Internal server error,
      content: {
        application/json: {
          schema: {
            $ref: #/components/schemas/ErrorResponse
          }
        }
      }
    }
  }
},
paths: {
  /api/auth/register: {
    post: {
      summary: Register a new user,
      description: Create a new user account with email and password,
      tags: [
        Authentication
      ],
      requestBody: {
        required: true,
        content: {
          application/json: {
            schema: {
              type: object,
              required: [
                name,
                email,
                password
              ],
              properties: {
                name: {
                  type: string,
                  description: Full name of the user,
                  example: John Doe
                },
                email: {
                  type: string,
                  format: email,
                  description: Email address of the user,
                  example: john@example.com
                },
                password: {
                  type: string,
                  description: Password for the account (minimum 8 characters),
                  example: SecureP@ss123
                }
              }
            }
          }
        }
      },
      responses: {
        201: {
          description: User registered successfully,
          content: {
            application/json: {
              schema: {
                allOf: [
                  {
                    $ref: #/components/schemas/ApiResponse
                  },
                  {
                    type: object,
                    properties: {
                      data: {
                        $ref: #/components/schemas/User
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        400: {
          description: Bad request - Invalid input data,
          content: {
            application/json: {
              schema: {
                $ref: #/components/schemas/ErrorResponse
              }
            }
          }
        },
        409: {
          description: Conflict - User already exists,
          content: {
            application/json: {
              schema: {
                $ref: #/components/schemas/ErrorResponse
              }
            }
          }
        },
        429: {
          $ref: #/components/responses/TooManyRequests
        },
        500: {
          $ref: #/components/responses/InternalServerError
        }
      }
    }
  },
  /api/auth/login: {
    post: {
      summary: Login user,
      description: Authenticate user with email and password, returns access and refresh tokens,
      tags: [
        Authentication
      ],
      requestBody: {
        required: true,
        content: {
          application/json: {
            schema: {
              type: object,
              required: [
                email,
                password
              ],
              properties: {
                email: {
                  type: string,
                  format: email,
                  description: Email address of the user,
                  example: john@example.com
                },
                password: {
                  type: string,
                  description: Password for the account,
                  example: SecureP@ss123
                }
              }
            }
          }
        }
      },
      responses: {
        200: {
          description: Login successful,
          content: {
            application/json: {
              schema: {
                allOf: [
                  {
                    $ref: #/components/schemas/ApiResponse
                  },
                  {
                    type: object,
                    properties: {
                      data: {
                        type: object,
                        properties: {
                          user: {
                            $ref: #/components/schemas/User
                          },
                          accessToken: {
                            type: string,
                            description: JWT access token
                          },
                          refreshToken: {
                            type: string,
                            description: JWT refresh token
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        400: {
          description: Bad request - Invalid input data,
          content: {
            application/json: {
              schema: {
                $ref: #/components/schemas/ErrorResponse
              }
            }
          }
        },
        401: {
          description: Unauthorized - Invalid credentials,
          content: {
            application/json: {
              schema: {
                $ref: #/components/schemas/ErrorResponse
              }
            }
          }
        },
        429: {
          $ref: #/components/responses/TooManyRequests
        },
        500: {
          $ref: #/components/responses/InternalServerError
        }
      }
    }
  },
  /api/auth/refresh: {
    post: {
      summary: Refresh access token,
      description: Get a new access token using refresh token,
      tags: [
        Authentication
      ],
      requestBody: {
        required: true,
        content: {
          application/json: {
            schema: {
              type: object,
              required: [
                refreshToken
              ],
              properties: {
                refreshToken: {
                  type: string,
                  description: Valid refresh token,
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                }
              }
            }
          }
        }
      },
      responses: {
        200: {
          description: Token refreshed successfully,
          content: {
            application/json: {
              schema: {
                allOf: [
                  {
                    $ref: #/components/schemas/ApiResponse
                  },
                  {
                    type: object,
                    properties: {
                      data: {
                        type: object,
                        properties: {
                          user: {
                            $ref: #/components/schemas/User
                          },
                          accessToken: {
                            type: string,
                            description: New JWT access token
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        400: {
          description: Bad request - Invalid refresh token,
          content: {
            application/json: {
              schema: {
                $ref: #/components/schemas/ErrorResponse
              }
            }
          }
        },
        401: {
          description: Unauthorized - Invalid or expired refresh token,
          content: {
            application/json: {
              schema: {
                $ref: #/components/schemas/ErrorResponse
              }
            }
          }
        },
        404: {
          description: Not found - User not found,
          content: {
            application/json: {
              schema: {
                $ref: #/components/schemas/ErrorResponse
              }
            }
          }
        },
        500: {
          $ref: #/components/responses/InternalServerError
        }
      }
    }
  },
  /api/auth/me: {
    get: {
      summary: Get current user profile,
      description: Get the profile information of the currently authenticated user,
      tags: [
        Authentication
      ],
      security: [
        {
          bearerAuth: []
        }
      ],
      responses: {
        200: {
          description: User profile retrieved successfully,
          content: {
            application/json: {
              schema: {
                allOf: [
                  {
                    $ref: #/components/schemas/ApiResponse
                  },
                  {
                    type: object,
                    properties: {
                      data: {
                        $ref: #/components/schemas/User
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        401: {
          description: Unauthorized - Authentication required,
          content: {
            application/json: {
              schema: {
                $ref: #/components/schemas/ErrorResponse
              }
            }
          }
        },
        500: {
          $ref: #/components/responses/InternalServerError
        }
      }
    }
  },
  /api: {
    get: {
      summary: Get API information,
      description: Get basic information about the API and available endpoints,
      tags: [
        API Info
      ],
      responses: {
        200: {
          description: API information retrieved successfully,
          content: {
            application/json: {
              schema: {
                type: object,
                properties: {
                  message: {
                    type: string,
                    example: Stack API
                  },
                  version: {
                    type: string,
                    example: 1.0.0
                  },
                  endpoints: {
                    type: object,
                    properties: {
                      health: {
                        type: string,
                        example: /health
                      },
                      users: {
                        type: string,
                        example: /api/users
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  /api/users: {
    get: {
      summary: Get all users,
      description: Retrieve a list of all users with pagination,
      tags: [
        Users
      ],
      parameters: [
        {
          in: query,
          name: limit,
          schema: {
            type: integer,
            minimum: 1,
            maximum: 100,
            default: 50
          },
          description: Number of users to return
        },
        {
          in: query,
          name: offset,
          schema: {
            type: integer,
            minimum: 0,
            default: 0
          },
          description: Number of users to skip
        }
      ],
      responses: {
        200: {
          description: Users retrieved successfully,
          content: {
            application/json: {
              schema: {
                allOf: [
                  {
                    $ref: #/components/schemas/ApiResponse
                  },
                  {
                    type: object,
                    properties: {
                      data: {
                        type: object,
                        properties: {
                          users: {
                            type: array,
                            items: {
                              $ref: #/components/schemas/User
                            }
                          },
                          total: {
                            type: integer
                          },
                          hasMore: {
                            type: boolean
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        429: {
          $ref: #/components/responses/TooManyRequests
        },
        500: {
          $ref: #/components/responses/InternalServerError
        }
      }
    }
  },
  /api/users/{id}: {
    get: {
      summary: Get user by ID,
      description: Retrieve a specific user by their ID,
      tags: [
        Users
      ],
      parameters: [
        {
          in: path,
          name: id,
          required: true,
          description: User ID,
          schema: {
            type: string,
            format: uuid,
            example: d952abd1-0df6-4433-a9f4-f68ed64c1217
          }
        }
      ],
      responses: {
        200: {
          description: User retrieved successfully,
          content: {
            application/json: {
              schema: {
                allOf: [
                  {
                    $ref: #/components/schemas/ApiResponse
                  },
                  {
                    type: object,
                    properties: {
                      data: {
                        $ref: #/components/schemas/User
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        400: {
          $ref: #/components/responses/BadRequest
        },
        404: {
          $ref: #/components/responses/NotFound
        },
        429: {
          $ref: #/components/responses/TooManyRequests
        },
        500: {
          $ref: #/components/responses/InternalServerError
        }
      }
    },
    put: {
      summary: Update user by ID,
      description: Update a specific user by their ID (requires authentication),
      tags: [
        Users
      ],
      security: [
        {
          bearerAuth: []
        }
      ],
      parameters: [
        {
          in: path,
          name: id,
          required: true,
          description: User ID,
          schema: {
            type: string,
            format: uuid,
            example: d952abd1-0df6-4433-a9f4-f68ed64c1217
          }
        }
      ],
      requestBody: {
        required: true,
        content: {
          application/json: {
            schema: {
              type: object,
              properties: {
                name: {
                  type: string,
                  description: Full name of the user,
                  example: John Doe Updated
                },
                email: {
                  type: string,
                  format: email,
                  description: Email address of the user,
                  example: john.updated@example.com
                },
                password: {
                  type: string,
                  description: New password (optional),
                  example: NewSecureP@ss123
                }
              }
            }
          }
        }
      },
      responses: {
        200: {
          description: User updated successfully,
          content: {
            application/json: {
              schema: {
                allOf: [
                  {
                    $ref: #/components/schemas/ApiResponse
                  },
                  {
                    type: object,
                    properties: {
                      data: {
                        $ref: #/components/schemas/User
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        400: {
          $ref: #/components/responses/BadRequest
        },
        401: {
          description: Unauthorized - Authentication required,
          content: {
            application/json: {
              schema: {
                $ref: #/components/schemas/ErrorResponse
              }
            }
          }
        },
        403: {
          description: Forbidden - Can only update own profile,
          content: {
            application/json: {
              schema: {
                $ref: #/components/schemas/ErrorResponse
              }
            }
          }
        },
        404: {
          $ref: #/components/responses/NotFound
        },
        409: {
          description: Conflict - Email already exists,
          content: {
            application/json: {
              schema: {
                $ref: #/components/schemas/ErrorResponse
              }
            }
          }
        },
        500: {
          $ref: #/components/responses/InternalServerError
        }
      }
    },
    delete: {
      summary: Delete user by ID,
      description: Delete a specific user by their ID (requires authentication),
      tags: [
        Users
      ],
      security: [
        {
          bearerAuth: []
        }
      ],
      parameters: [
        {
          in: path,
          name: id,
          required: true,
          description: User ID,
          schema: {
            type: string,
            format: uuid,
            example: d952abd1-0df6-4433-a9f4-f68ed64c1217
          }
        }
      ],
      responses: {
        200: {
          description: User deleted successfully,
          content: {
            application/json: {
              schema: {
                allOf: [
                  {
                    $ref: #/components/schemas/ApiResponse
                  },
                  {
                    type: object,
                    properties: {
                      data: {
                        type: object,
                        properties: {
                          deleted: {
                            type: boolean,
                            example: true
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        400: {
          $ref: #/components/responses/BadRequest
        },
        401: {
          description: Unauthorized - Authentication required,
          content: {
            application/json: {
              schema: {
                $ref: #/components/schemas/ErrorResponse
              }
            }
          }
        },
        403: {
          description: Forbidden - Can only delete own profile,
          content: {
            application/json: {
              schema: {
                $ref: #/components/schemas/ErrorResponse
              }
            }
          }
        },
        404: {
          $ref: #/components/responses/NotFound
        },
        500: {
          $ref: #/components/responses/InternalServerError
        }
      }
    }
  },
  /health: {
    get: {
      summary: Health check,
      description: Check if the API server is running and healthy,
      tags: [
        Health
      ],
      responses: {
        200: {
          description: Server is healthy,
          content: {
            application/json: {
              schema: {
                $ref: #/components/schemas/HealthCheck
              }
            }
          }
        },
        500: {
          $ref: #/components/responses/InternalServerError
        }
      }
    }
  }
},
tags: []
}