name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20'

jobs:
  # Test Matrix for different Node versions
  test-matrix:
    name: Test on Node.js ${{ matrix.node-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['18', '20', '22']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: api/package-lock.json

    - name: Install API dependencies
      run: |
        cd api
        npm ci

    - name: Run API type check
      run: |
        cd api
        npm run type-check

    - name: Test API build
      run: |
        cd api
        npm run build

  # Database Integration Test
  database-test:
    name: Database Integration Test
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_DB: stack_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: api/package-lock.json

    - name: Install API dependencies
      run: |
        cd api
        npm ci

    - name: Test database connection
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: stack_test
        DB_USER: postgres
        DB_PASSWORD: postgres
        DB_SSL: false
      run: |
        cd api
        npm run db:init

  # API Authentication Test
  api-integration-test:
    name: API Integration Test
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_DB: stack_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: api/package-lock.json

    - name: Install API dependencies
      run: |
        cd api
        npm ci

    - name: Initialize test database
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: stack_test
        DB_USER: postgres
        DB_PASSWORD: postgres
        DB_SSL: false
        NODE_ENV: test
      run: |
        cd api
        npm run db:init

    - name: Start API server in background
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: stack_test
        DB_USER: postgres
        DB_PASSWORD: postgres
        DB_SSL: false
        NODE_ENV: test
        PORT: 3000
      run: |
        cd api
        npm run build
        npm start &
        sleep 10
      
    - name: Test API health endpoint
      run: |
        curl -f http://localhost:3000/health

    - name: Test API documentation endpoint
      run: |
        curl -f http://localhost:3000/api-docs/ | head -10

  # Client Build Test
  client-build-test:
    name: Client Build Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: client/package-lock.json

    - name: Install Client dependencies
      run: |
        cd client
        npm ci

    - name: Build Client
      run: |
        cd client
        npm run build

    - name: Test Client pages
      run: |
        cd client
        # Check if built pages exist
        test -d .next/static
        test -f .next/build-manifest.json

  # Docker Build Test
  docker-build-test:
    name: Docker Build Test
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_DB: stack
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Install PostgreSQL client
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client

    - name: Build API Docker image
      run: |
        docker build -f docker/api.Dockerfile -t stack-api:test .

    - name: Build Client Docker image
      run: |
        docker build -f docker/client.Dockerfile -t stack-client:test .

    - name: Wait for PostgreSQL to be ready
      run: |
        echo "üîç Waiting for PostgreSQL to be ready..."
        for i in {1..30}; do
          if pg_isready -h localhost -p 5432 -U postgres; then
            echo "‚úÖ PostgreSQL is ready"
            break
          else
            echo "‚è≥ Waiting for PostgreSQL (attempt $i/30)..."
            sleep 2
          fi
        done
        
        # Test database connection
        echo "üîç Testing database connection..."
        PGPASSWORD=postgres psql -h localhost -p 5432 -U postgres -d stack -c "SELECT version();" || {
          echo "‚ùå Could not connect to database"
          exit 1
        }
        
        # Initialize database schema
        echo "üîç Initializing database schema..."
        cd api
        npm ci
        DB_HOST=localhost DB_PORT=5432 DB_NAME=stack DB_USER=postgres DB_PASSWORD=postgres DB_SSL=false npm run db:init || {
          echo "‚ùå Could not initialize database"
          exit 1
        }
        cd ..

    - name: Test API container
      run: |
        # First, let's try a simple container test without database
        echo "üîç Testing API container basic startup..."
        
        # Try to run the container with minimal config first
        echo "üìã Step 1: Testing container image integrity..."
        docker run --rm stack-api:test node --version || {
          echo "‚ùå Container image is broken"
          exit 1
        }
        
        # Now test with database connection
        echo "ÔøΩ Step 2: Starting API container with database..."
        CONTAINER_ID=$(docker run -d --name test-api \
          --network host \
          -e DB_HOST=localhost \
          -e DB_PORT=5432 \
          -e DB_NAME=stack \
          -e DB_USER=postgres \
          -e DB_PASSWORD=postgres \
          -e DB_SSL=false \
          -e NODE_ENV=test \
          -e JWT_SECRET=test-secret-key \
          -e PORT=3000 \
          stack-api:test)
        
        echo "üìã Container ID: $CONTAINER_ID"
        
        # Wait a moment for container to start
        sleep 5
        
        # Check container status immediately
        echo "üîç Checking container status..."
        docker ps -a | grep test-api || echo "Container not found in ps"
        
        # Get container logs immediately
        echo "üìã Container logs:"
        docker logs test-api 2>&1 || echo "Could not get logs"
        
        # Check if container is still running
        if docker ps | grep test-api > /dev/null; then
          echo "‚úÖ API container is running successfully"
          
          # Wait a bit more for the API to be ready
          sleep 10
          
          # Test health endpoint with timeout
          echo "üîç Testing health endpoint..."
          for i in {1..3}; do
            if timeout 5 curl -f http://localhost:3000/health 2>/dev/null; then
              echo "‚úÖ API health endpoint is accessible"
              break
            else
              echo "‚è≥ Waiting for API to be ready (attempt $i/3)..."
              docker logs test-api --tail 20 2>&1 || true
              sleep 5
            fi
          done
        else
          echo "‚ùå API container crashed or exited"
          echo "üìã Final container logs:"
          docker logs test-api 2>&1 || echo "Could not get final logs"
          
          echo "üìã Container inspect:"
          docker inspect test-api --format='{{.State.ExitCode}} {{.State.Error}}' 2>/dev/null || echo "Could not inspect container"
          
          # Clean up and exit with error
          docker rm test-api 2>/dev/null || true
          exit 1
        fi
        
        # Clean up
        echo "üßπ Cleaning up container..."
        docker stop test-api 2>/dev/null || true
        docker rm test-api 2>/dev/null || true

    - name: Test Client container
      run: |
        # Start Client container
        docker run --rm -d --name test-client \
          -p 3000:3000 \
          -e NEXT_PUBLIC_API_URL=http://localhost:3000 \
          stack-client:test
        
        # Wait for container to start
        sleep 10
        
        # Check if container is running
        if docker ps | grep test-client; then
          echo "‚úÖ Client container is running successfully"
          
          # Test if Next.js is responding
          if curl -f http://localhost:3000/ 2>/dev/null; then
            echo "‚úÖ Client is serving pages successfully"
          else
            echo "‚ö†Ô∏è Client not accessible on port 3000 (may need more time)"
          fi
        else
          echo "‚ùå Client container crashed - checking logs:"
          docker logs test-client || true
          exit 1
        fi
        
        # Clean up
        docker stop test-client || true
