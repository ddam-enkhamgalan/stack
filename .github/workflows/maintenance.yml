name: üõ†Ô∏è Dependency Maintenance

on:
  schedule:
    # Run every Monday at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:

jobs:
  dependency_check:
    name: üì¶ Dependency Check
    runs-on: ubuntu-latest
    
    outputs:
      api_updates: ${{ steps.check.outputs.api_updates }}
      client_updates: ${{ steps.check.outputs.client_updates }}
      services_updates: ${{ steps.check.outputs.services_updates }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install dependencies
      run: |
        echo "üì¶ Installing dependencies..."
        
        # Install API dependencies
        cd api && npm ci
        cd ..
        
        # Install Client dependencies  
        cd client && npm ci
        cd ..
        
        # Install Services dependencies
        cd services && npm ci
        cd ..

    - name: Check for dependency updates
      id: check
      run: |
        echo "üîç Checking for dependency updates..."
        
        # Function to safely count outdated packages
        count_outdated() {
          local dir=$1
          cd "$dir"
          local outdated_json=$(npm outdated --json 2>/dev/null || echo '{}')
          local count=0
          
          # Handle case where npm outdated returns empty or malformed JSON
          if [ -n "$outdated_json" ] && [ "$outdated_json" != "{}" ]; then
            count=$(echo "$outdated_json" | jq -r 'if type == "object" then . | length else 0 end' 2>/dev/null || echo "0")
          fi
          
          # Ensure count is a valid number
          if ! [[ "$count" =~ ^[0-9]+$ ]]; then
            count=0
          fi
          
          echo "$count"
          cd ..
        }
        
        # Check each directory
        API_COUNT=$(count_outdated "api")
        CLIENT_COUNT=$(count_outdated "client") 
        SERVICES_COUNT=$(count_outdated "services")
        
        # Set outputs
        echo "api_updates=${API_COUNT}" >> $GITHUB_OUTPUT
        echo "client_updates=${CLIENT_COUNT}" >> $GITHUB_OUTPUT
        echo "services_updates=${SERVICES_COUNT}" >> $GITHUB_OUTPUT
        
        echo "üìä Update Summary:"
        echo "- API: ${API_COUNT} packages"
        echo "- Client: ${CLIENT_COUNT} packages"
        echo "- Services: ${SERVICES_COUNT} packages"
        
        # Debug output values for troubleshooting
        echo "Debug - API_COUNT: '${API_COUNT}'"
        echo "Debug - CLIENT_COUNT: '${CLIENT_COUNT}'"
        echo "Debug - SERVICES_COUNT: '${SERVICES_COUNT}'"

  security_check:
    name: üîí Security Check
    runs-on: ubuntu-latest
    
    outputs:
      vulnerabilities_found: ${{ steps.audit.outputs.vulnerabilities_found }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install dependencies
      run: |
        cd api && npm ci
        cd ../client && npm ci
        cd ../services && npm ci

    - name: Security audit
      id: audit
      run: |
        echo "üîç Running security audit..."
        
        VULNERABILITIES=0
        
        # Function to safely run audit
        run_audit() {
          local dir=$1
          cd "$dir"
          echo "Auditing $dir..."
          if ! npm audit --audit-level=moderate; then
            echo "‚ö†Ô∏è Vulnerabilities found in $dir"
            VULNERABILITIES=$((VULNERABILITIES + 1))
          else
            echo "‚úÖ No vulnerabilities in $dir"
          fi
          cd ..
        }
        
        # Audit each directory
        run_audit "api"
        run_audit "client" 
        run_audit "services"
        
        echo "vulnerabilities_found=$VULNERABILITIES" >> $GITHUB_OUTPUT
        
        if [ $VULNERABILITIES -gt 0 ]; then
          echo "‚ùå $VULNERABILITIES project(s) with vulnerabilities found"
        else
          echo "‚úÖ No security vulnerabilities found"
        fi

  create_maintenance_issue:
    name: üìã Create Maintenance Issue
    runs-on: ubuntu-latest
    needs: [dependency_check, security_check]
    if: |
      (needs.dependency_check.outputs.api_updates != '0' && needs.dependency_check.outputs.api_updates != '') ||
      (needs.dependency_check.outputs.client_updates != '0' && needs.dependency_check.outputs.client_updates != '') ||
      (needs.dependency_check.outputs.services_updates != '0' && needs.dependency_check.outputs.services_updates != '') ||
      (needs.security_check.outputs.vulnerabilities_found != '0' && needs.security_check.outputs.vulnerabilities_found != '')
    
    steps:
    - name: Create maintenance issue
      uses: actions/github-script@v7
      with:
        script: |
          const apiUpdates = '${{ needs.dependency_check.outputs.api_updates }}';
          const clientUpdates = '${{ needs.dependency_check.outputs.client_updates }}';
          const servicesUpdates = '${{ needs.dependency_check.outputs.services_updates }}';
          const vulnerabilities = '${{ needs.security_check.outputs.vulnerabilities_found }}';
          
          const priority = vulnerabilities > 0 ? 'üö® High' : 'Medium';
          const labels = vulnerabilities > 0 ? ['maintenance', 'security', 'high-priority'] : ['maintenance'];
          
          const issueBody = `## üõ†Ô∏è Weekly Maintenance Report
          
          **Generated:** ${new Date().toISOString().split('T')[0]}
          **Priority:** ${priority}
          
          ### üìä Summary
          
          - **API Packages to Update:** ${apiUpdates}
          - **Client Packages to Update:** ${clientUpdates}
          - **Services Packages to Update:** ${servicesUpdates}
          - **Security Vulnerabilities:** ${vulnerabilities}
          
          ### üìã Action Items
          
          - [ ] Review and update outdated dependencies
          - [ ] Address security vulnerabilities${vulnerabilities > 0 ? ' ‚ö†Ô∏è' : ''}
          - [ ] Test updated dependencies locally
          - [ ] Update documentation if needed
          - [ ] Verify license compliance
          
          ### üîß Local Development Instructions
          
          1. **Update Dependencies:**
             \`\`\`bash
             # Update API dependencies
             cd api && npm update
             
             # Update Client dependencies
             cd ../client && npm update
             
             # Update Services dependencies
             cd ../services && npm update
             \`\`\`
          
          2. **Security Fixes:**
             \`\`\`bash
             cd api && npm audit fix
             cd ../client && npm audit fix
             cd ../services && npm audit fix
             \`\`\`
          
          3. **Local Testing:**
             \`\`\`bash
             ./scripts/dev.sh
             \`\`\`
          
          4. **Check for Issues:**
             \`\`\`bash
             # Run quality checks
             cd api && npm run lint && npm run type-check
             cd ../client && npm run lint
             cd ../services && npm run lint && npm run type-check
             \`\`\`
          
          ---
          *This issue was automatically created by the maintenance workflow.*`;
          
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: \`üõ†Ô∏è Weekly Maintenance - \${new Date().toISOString().split('T')[0]}\`,
            body: issueBody,
            labels: labels
          });
