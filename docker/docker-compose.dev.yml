services:
  # PostgreSQL Database (shared between dev and prod)
  postgres:
    image: postgres:16-alpine
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: stack
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d stack"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  api:
    build:
      context: ../
      dockerfile: docker/api.Dockerfile
      target: builder  # Use builder stage for development with dev dependencies
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - CORS_ORIGIN=http://localhost:4000
      - CORS_CREDENTIALS=true
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/stack
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=stack
      - DB_SSL=false
    volumes:
      - ../api/src:/app/src
      - ../api/package.json:/app/package.json
      - api_node_modules:/app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
    command: npm run dev
    restart: unless-stopped

  client:
    build:
      context: ../
      dockerfile: docker/client.Dockerfile
      target: builder  # Use builder stage for development
    ports:
      - "4000:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - NEXT_PUBLIC_API_URL=http://localhost:3000
    volumes:
      - ../client:/app
      - client_node_modules:/app/node_modules
      - /app/.next
    command: npm run dev
    restart: unless-stopped

volumes:
  api_node_modules:
  client_node_modules:
  postgres_data_dev:
